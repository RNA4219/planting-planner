name: ci

on:
  push:
    branches: [ main ]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-poetry:
    name: backend dependencies (poetry)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: install poetry
        run: |
          pipx install poetry
          poetry self add poetry-plugin-export
      - name: install dependencies
        run: poetry install --with backend,dev
      - name: export backend requirements
        run: |
          poetry export --without-hashes -f requirements.txt --with backend -o backend/requirements.txt
          poetry export --without-hashes -f requirements.txt --with backend,dev -o backend/requirements-dev.txt
      - name: verify exported requirements
        run: git diff --exit-code backend/requirements*.txt

  frontend-typecheck:
    name: frontend typecheck (vite+ts)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package.json
      - run: npm ci
      - run: npm run typecheck

  frontend-lint:
    name: frontend lint (vite+ts)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package.json
      - run: npm ci
      - run: npm run lint

  frontend-test:
    name: frontend test (vite+ts)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package.json
      - run: npm ci
      - run: npm test

  frontend-build:
    name: frontend build (vite+ts)
    runs-on: ubuntu-latest
    needs:
      - frontend-typecheck
      - frontend-lint
      - frontend-test
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package.json
      - run: npm ci
      - run: npm run build
      - run: npm run test:bundle-size
      - uses: actions/upload-artifact@v4
        if: success()
        with:
          name: planting-planner-frontend-dist
          path: frontend/dist

  frontend-e2e:
    name: frontend e2e (playwright)
    runs-on: ubuntu-latest
    needs: frontend-build
    timeout-minutes: 20
    defaults:
      run:
        working-directory: frontend
    env:
      CI: 'true'
      PLAYWRIGHT_BROWSERS_PATH: 0
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '0'
      VITE_API_ENDPOINT: http://127.0.0.1:8000/api
      VITE_ENABLE_MOCKS: 'false'
      WEB_PORT: 4173
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package.json
      - run: npm ci
      - name: install playwright browsers
        run: npx --yes playwright@1.47.0 install --with-deps chromium
      - name: run e2e tests
        run: npm run test:e2e
      - name: upload playwright report
        if: ${{ always() && (hashFiles('frontend/playwright-report/**') != '' || hashFiles('frontend/test-results/**') != '') }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            frontend/playwright-report
            frontend/test-results
          if-no-files-found: ignore

  frontend-e2e-metrics:
    name: frontend e2e metrics
    runs-on: ubuntu-latest
    needs: frontend-e2e
    defaults:
      run:
        working-directory: backend
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - run: pip install -r requirements.txt
      - name: collect playwright metrics
        run: python -m app.ci.playwright_metrics --workflow-file ci.yml
      - name: upload playwright metrics
        uses: actions/upload-artifact@v4
        with:
          name: playwright-e2e-metrics
          path: backend/playwright-e2e-metrics.json

  backend-lint:
    name: backend lint (ruff+black+mypy)
    runs-on: ubuntu-latest
    needs: backend-poetry
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: install poetry
        run: pipx install poetry
      - name: install dependencies
        run: poetry install --with backend,dev
        working-directory: ..
      - name: lint (ruff)
        run: poetry --directory .. run ruff check .
      - name: format check (black)
        run: poetry --directory .. run black --check .
      - name: type check (mypy)
        run: poetry --directory .. run mypy app

  backend-test:
    name: backend test (pytest)
    runs-on: ubuntu-latest
    needs: backend-poetry
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: install poetry
        run: pipx install poetry
      - name: install dependencies
        run: poetry install --with backend,dev
        working-directory: ..
      - name: test (pytest)
        run: poetry --directory .. run pytest --cov=app --cov-report=term --cov-report=xml --cov-fail-under=80
      - name: upload coverage report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: coverage.xml

  frontend-lighthouse:
    name: frontend lighthouse (smoke)
    runs-on: ubuntu-latest
    needs: frontend-build
    timeout-minutes: 15
    env:
      CI: 'true'
      LHCI_BUILD_CONTEXT__CURRENT_BRANCH: ${{ github.ref_name }}
      LHCI_BUILD_CONTEXT__COMMIT_MESSAGE: ${{ github.event.head_commit.message || github.event.pull_request.title }}
      LHCI_BUILD_CONTEXT__AUTHOR: ${{ github.actor }}
      LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: planting-planner-frontend-dist
          path: frontend/dist
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: install lighthouse ci
        run: npm install --global @lhci/cli@0.13.0
      - name: lighthouse smoke test
        run: |
          lhci autorun \
            --config=frontend/lighthouserc.json
      - name: upload lighthouse report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: |
            ./lhci-report
            ./.lighthouseci
          if-no-files-found: ignore
